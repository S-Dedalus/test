#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>


#define GCPin 16 //wejscie licznika na pin D1



int zlicz = 0;
unsigned long aktualnyCzas = 0;
unsigned long zapamietanyCzas = 0;
unsigned long roznicaCzasu = 0;
unsigned long ledOnTime = 0;
unsigned long roznicaCzasuLed;
float dawka = 0;
const float factor = 0.006666;
boolean ledState = HIGH;

ESP8266WiFiMulti WiFiMulti;

void setup() {
  Serial.begin(115200);
  pinMode(GCPin, INPUT_PULLDOWN_16);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, ledState);



  for (uint8_t t = 4; t > 0; t--) {
    Serial.printf("[SETUP] WAIT %d...\n", t);
    Serial.flush();
    delay(1000);
  }

  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP("*******", "**********");

}

void loop() {
  if (digitalRead(GCPin)) {
    zlicz ++;
    Serial.println(zlicz);
    if (ledState == HIGH) {
      ledState = LOW;
      ledOnTime = millis();
    }





    /*digitalWrite(LED_BUILTIN, LOW);
      Serial.println(zlicz);
      digitalWrite(LED_BUILTIN, HIGH);*/
  }

  aktualnyCzas = millis();
  roznicaCzasu = aktualnyCzas - zapamietanyCzas;
  roznicaCzasuLed = aktualnyCzas - ledOnTime;
  if (roznicaCzasu >= 6000UL) {
    zapamietanyCzas = aktualnyCzas;
    Serial.print("trafien: ");
    Serial.print(zlicz);
    Serial.println(" CPM");
    dawka = zlicz * factor;
    Serial.print("Szacowana dawka: ");
    Serial.print(dawka);
    Serial.println(" uSv/h");


    if ((WiFiMulti.run() == WL_CONNECTED)) {
      WiFiClient client;
      HTTPClient http;
      String domoticzIP = "http://192.168.1.55:8080/json.htm?type=command&param=udevice&idx=37&nvalue=0&svalue=";
      Serial.print("[HTTP] begin...\n");
      if (http.begin(client, domoticzIP += dawka)) {

        Serial.print("[HTTP] GET...\n");
        // start connection and send HTTP header
        int httpCode = http.GET();

        // httpCode will be negative on error
        if (httpCode > 0) {
          // HTTP header has been send and Server response header has been handled
          Serial.printf("[HTTP] GET... code: %d\n", httpCode);

          // file found at server
          if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
            String payload = http.getString();
            Serial.println(payload);
          }
        } else {
          Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
        }


        http.end();
      }
    }
    zlicz = 0;
    dawka = 0;
  }
  if (roznicaCzasuLed >= 100) {
    ledState = HIGH;
    roznicaCzasuLed = 0;
    ledOnTime = 0;
  }
  digitalWrite(LED_BUILTIN, ledState);
}
